// Generated by LiveScript 1.2.0
(function(){
  var Net, net, out$ = typeof exports != 'undefined' && exports || this;
  Net = (function(){
    Net.displayName = 'Net';
    var prototype = Net.prototype, constructor = Net;
    prototype.connections = [];
    function Net(){
      this.onConnection = this.onConnectionDefault;
      this.onData = this.onDataDefault;
      this.onOpen = this.onOpenDefault;
    }
    prototype.listen = function(peerName, host, port){
      var this$ = this;
      this.peer = new Peer(peerName, {
        host: 'localhost',
        port: 9000
      });
      return this.peer.on('connection', function(conn){
        return this$._onConnection(conn);
      });
    };
    prototype._onConnection = function(conn){
      var this$ = this;
      console.log('_onConnection');
      conn.on('data', function(data){
        return this$.onData(data);
      });
      conn.on('open', function(id){
        return this$.onOpen(id);
      });
      this.connections.push(conn);
      return this.onConnection(conn);
    };
    prototype.connect = function(peerName){
      var this$ = this;
      this.peer = new Peer({
        host: 'localhost',
        port: 9000
      });
      this.conn = this.peer.connect(peerName);
      this.conn.on('open', function(id){
        return this$.onOpen(id);
      });
      this.conn.on('data', function(data){
        return this$.onData(data);
      });
      return this.connections.push(this.conn);
    };
    prototype.send = function(data){
      var i$, ref$, len$, conn, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.connections).length; i$ < len$; ++i$) {
        conn = ref$[i$];
        console.log('sending' + data);
        results$.push(conn.send(data));
      }
      return results$;
    };
    prototype.onOpenDefault = function(id){
      return console.log('onOpenDefault');
    };
    prototype.onConnectionDefault = function(conn){
      return console.log('onConnectionDefault');
    };
    prototype.onDataDefault = function(data){
      return console.log(data);
    };
    return Net;
  }());
  out$.net = net = new Net;
}).call(this);
