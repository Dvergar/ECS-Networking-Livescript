// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  var components, numComponents, componentName, componentType, EntityManager, em, out$ = typeof exports != 'undefined' && exports || this;
  components = dcodeIO.ProtoBuf.loadProtoFile('components.proto').build();
  numComponents = 0;
  for (componentName in components) {
    componentType = components[componentName];
    componentType.id = numComponents;
    componentType.prototype.id = numComponents++;
    window[componentName + ""] = componentType;
  }
  EntityManager = (function(){
    EntityManager.displayName = 'EntityManager';
    var prototype = EntityManager.prototype, constructor = EntityManager;
    prototype.componentStore = repeatArray$([undefined], numComponents);
    prototype.systems = repeatArray$([undefined], numComponents);
    prototype.entityIds = 0;
    prototype.createEntity = function(){
      return this.entityIds++;
    };
    prototype.addComponent = function(entity, component){
      var store, i$, ref$, len$, system, results$ = [];
      store = this.componentStore[component.id];
      if (store === undefined) {
        this.componentStore[component.id] = {};
      }
      this.componentStore[component.id][entity + ""] = component;
      console.log(this.componentStore);
      if (this.systems[component.id] !== undefined) {
        for (i$ = 0, len$ = (ref$ = this.systems[component.id]).length; i$ < len$; ++i$) {
          system = ref$[i$];
          results$.push(system._onComponentAdded(entity, component));
        }
        return results$;
      }
    };
    prototype.getComponent = function(entity, componentType){
      var store, component;
      store = this.componentStore[componentType.id];
      if (store === undefined) {
        throw new Error("No entity with that comp");
      }
      component = store[entity + ""];
      if (component === undefined) {
        throw new Error("Nope component!");
      }
      return component;
    };
    prototype.registerSystem = function(system, componentTypeList){
      var i$, len$, componentType, results$ = [];
      for (i$ = 0, len$ = componentTypeList.length; i$ < len$; ++i$) {
        componentType = componentTypeList[i$];
        if (this.systems[componentType.id] === undefined) {
          this.systems[componentType.id] = [];
        }
        results$.push(this.systems[componentType.id].push(system));
      }
      return results$;
    };
    function EntityManager(){}
    return EntityManager;
  }());
  out$.em = em = new EntityManager;
  function repeatArray$(arr, n){
    for (var r = []; n > 0; (n >>= 1) && (arr = arr.concat(arr)))
      if (n & 1) r.push.apply(r, arr);
    return r;
  }
}).call(this);
