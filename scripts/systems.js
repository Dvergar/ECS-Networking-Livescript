// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  var DrawableSystem, InputSystem, PositionSystem, ControllerSystem, out$ = typeof exports != 'undefined' && exports || this;
  DrawableSystem = (function(superclass){
    var prototype = extend$((import$(DrawableSystem, superclass).displayName = 'DrawableSystem', DrawableSystem), superclass).prototype, constructor = DrawableSystem;
    prototype.drawables = {};
    function DrawableSystem(){
      this.need([CDrawable, CPosition]);
    }
    prototype.onEntityAdded = function(entity){
      var drawable, pos, x$, graphics;
      console.log("DRAWABLE ENTITY ADDED");
      drawable = entity.get(CDrawable);
      pos = entity.get(CPosition);
      if (drawable.type === CDrawable.Type.RECTANGLE) {
        x$ = graphics = game.add.graphics(0, 0);
        x$.beginFill(drawable.color);
        x$.drawRect(0, 0, drawable.width, drawable.height);
        return this.drawables[entity.id] = graphics;
      }
    };
    prototype.loop = function(){
      var id, ref$, entity, pos, x$, results$ = [];
      for (id in ref$ = this.entities) {
        entity = ref$[id];
        pos = entity.get(CPosition);
        x$ = this.drawables[id];
        x$.x = pos.x;
        x$.y = pos.y;
        results$.push(x$);
      }
      return results$;
    };
    return DrawableSystem;
  }(System));
  InputSystem = (function(superclass){
    var prototype = extend$((import$(InputSystem, superclass).displayName = 'InputSystem', InputSystem), superclass).prototype, constructor = InputSystem;
    function InputSystem(){
      this.need([CPosition]);
      this.keyUp = game.input.keyboard.addKey(Phaser.Keyboard.UP);
      this.keyDown = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
      this.keyLeft = game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
      this.keyRight = game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
    }
    prototype.loop = function(){
      var id, ref$, entity, x$, input, results$ = [];
      for (id in ref$ = this.entities) {
        entity = ref$[id];
        x$ = input = entity.get(CInput);
        x$.keyUp = this.keyUp.isDown;
        x$.keyDown = this.keyDown.isDown;
        x$.keyLeft = this.keyLeft.isDown;
        x$.keyRight = this.keyRight.isDown;
        results$.push(x$);
      }
      return results$;
    };
    return InputSystem;
  }(System));
  PositionSystem = (function(superclass){
    var prototype = extend$((import$(PositionSystem, superclass).displayName = 'PositionSystem', PositionSystem), superclass).prototype, constructor = PositionSystem;
    function PositionSystem(){
      this.need([CPosition]);
    }
    return PositionSystem;
  }(System));
  ControllerSystem = (function(superclass){
    var prototype = extend$((import$(ControllerSystem, superclass).displayName = 'ControllerSystem', ControllerSystem), superclass).prototype, constructor = ControllerSystem;
    function ControllerSystem(){
      this.need([CPosition, CInput, CSpeed]);
    }
    prototype.loop = function(){
      var id, ref$, entity, input, pos, speed, results$ = [];
      for (id in ref$ = this.entities) {
        entity = ref$[id];
        input = entity.get(CInput);
        pos = entity.get(CPosition);
        speed = entity.get(CSpeed);
        if (input.keyUp) {
          pos.y -= speed.value;
        }
        if (input.keyDown) {
          pos.y += speed.value;
        }
        if (input.keyLeft) {
          pos.x -= speed.value;
        }
        if (input.keyRight) {
          results$.push(pos.x += speed.value);
        }
      }
      return results$;
    };
    return ControllerSystem;
  }(System));
  out$.DrawableSystem = DrawableSystem;
  out$.InputSystem = InputSystem;
  out$.PositionSystem = PositionSystem;
  out$.ControllerSystem = ControllerSystem;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
