// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  var NetEntityManager, net, out$ = typeof exports != 'undefined' && exports || this;
  NetEntityManager = (function(superclass){
    var entities, prototype = extend$((import$(NetEntityManager, superclass).displayName = 'NetEntityManager', NetEntityManager), superclass).prototype, constructor = NetEntityManager;
    NetEntityManager.ids = 0;
    entities = {};
    prototype.input = new dcodeIO.ByteBuffer;
    prototype.output = new dcodeIO.ByteBuffer;
    function NetEntityManager(){
      NetEntityManager.superclass.call(this);
      this.onData = this._onData;
    }
    prototype.createEntity = function(){
      var entity;
      entity = em.createEntity();
      return entities[entity.id] = entity;
    };
    prototype.addComponent = function(entity, component){
      return em.addComponent(entity(component));
    };
    prototype.pump = function(){
      var x$, ab, y$;
      x$ = this.output;
      if (x$.offset > 0) {
        ab = this.send(
        x$.toArrayBuffer());
        x$.reset();
      }
      y$ = this.input;
      if (y$.offset > 0) {
        y$.flip();
        this.readMessage();
        y$.reset();
      }
      return y$;
    };
    prototype.readMessage = function(){
      var x$, componentType, length, y$;
      console.log('readMessage');
      console.log("preoffset " + this.input.offset);
      console.log("length " + this.input.length);
      x$ = this.input;
      while (x$.remaining() > 0) {
        x$.mark();
        componentType = x$.readInt8();
        length = x$.readInt16();
        console.log("msglength " + length);
        y$ = components[componentType].decode(x$);
        console.log(y$.x);
        console.log(y$.y);
        console.log("offset " + x$.offset);
        x$.reset();
        x$.offset += length + 3;
        console.log("offset-- " + x$.offset);
      }
      x$.reset();
      return console.log("length " + this.input.length);
    };
    prototype._send = function(data){
      var ab;
      ab = data.toArrayBuffer();
      this.output.writeInt8(data.id);
      this.output.writeInt16(ab.byteLength);
      console.log("send bytelength " + data.byteLength);
      this.output.append(
      dcodeIO.ByteBuffer.wrap(
      ab));
      return console.log(this.output.offset);
    };
    prototype._onData = function(data){
      return this.input.append(
      dcodeIO.ByteBuffer.wrap(
      data));
    };
    return NetEntityManager;
  }(Net));
  out$.net = net = new NetEntityManager;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
