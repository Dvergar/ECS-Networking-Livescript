// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  var player, x$, position, y$, drawable, DrawableSystem, PositionSystem, game, paddle1;
  player = em.createEntity();
  x$ = position = new CPosition;
  x$.x = 5;
  x$.y = 5;
  y$ = drawable = new CDrawable;
  y$.imageName = "lel.png";
  console.log(CPosition.id);
  console.log(CDrawable.id);
  DrawableSystem = (function(superclass){
    var prototype = extend$((import$(DrawableSystem, superclass).displayName = 'DrawableSystem', DrawableSystem), superclass).prototype, constructor = DrawableSystem;
    prototype.drawables = {};
    function DrawableSystem(){
      this.need([CDrawable, CPosition]);
    }
    prototype.onEntityAdded = function(entity){
      return console.log("YEP");
    };
    return DrawableSystem;
  }(System));
  PositionSystem = (function(superclass){
    var prototype = extend$((import$(PositionSystem, superclass).displayName = 'PositionSystem', PositionSystem), superclass).prototype, constructor = PositionSystem;
    function PositionSystem(){
      this.need([CPosition]);
    }
    prototype.onEntityAdded = function(entity){
      return console.log("entity " + entity + " has been added");
    };
    prototype.onComponentAdded = function(entity, component){
      if (component.id === CPosition.id) {
        return console.log("x " + component.x);
      }
    };
    return PositionSystem;
  }(System));
  new DrawableSystem;
  new PositionSystem;
  em.addComponent(player, position);
  em.addComponent(player, drawable);
  game = new Phaser.Game(800, 600, Phaser.CANVAS, '', {
    create: create,
    render: render
  });
  function create(){
    return paddle1 = new Phaser.Rectangle(0, 0, 25, 80);
  }
  function render(){
    return game.debug.geom(paddle1, '#0fffff');
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
