// Generated by LiveScript 1.2.0
(function(){
  'use strict';
  var game, em, phaserDrawableSystem, phaserInputSystem, controllerSystem, targetSystem, phaserFollowMouseSystem, out$ = typeof exports != 'undefined' && exports || this;
  out$.game = game = new Phaser.Game(800, 600, Phaser.CANVAS, '', {
    update: update,
    create: create,
    preload: preload
  });
  out$.em = em = new EntityManager("client");
  function preload(){
    console.log('preload');
    game.load.image('wall', 'wall.png');
    return game.load.image('ship', 'ship.png');
  }
  function create(){
    var wall, ref$, ship;
    game.stage.backgroundColor = '#070624';
    phaserDrawableSystem = new PhaserDrawableSystem;
    phaserInputSystem = new PhaserInputSystem;
    controllerSystem = new ControllerSystem;
    targetSystem = new TargetSystem;
    phaserFollowMouseSystem = new PhaserFollowMouseSystem;
    wall = em.createEntity();
    em.addComponent(wall, (ref$ = new CPosition, ref$.x = 5, ref$.y = 5, ref$));
    em.addComponent(wall, (ref$ = new CTargetPosition, ref$.x = 200, ref$.y = 300, ref$.step = 0.01, ref$));
    em.addComponent(wall, (ref$ = new CDrawable, ref$.image_name = "wall", ref$.type = CDrawable.Type.IMAGE, ref$));
    ship = em.createEntity();
    em.addComponent(ship, (ref$ = new CPosition, ref$.x = 100, ref$.y = 100, ref$));
    em.addComponent(ship, (ref$ = new CDrawable, ref$.image_name = "ship", ref$.type = CDrawable.Type.IMAGE, ref$));
    return em.addComponent(ship, new CPhaserFollowMouse);
  }
  function update(){
    return em.fixedUpdate(function(){
      phaserInputSystem.loop();
      phaserDrawableSystem.loop();
      phaserFollowMouseSystem.loop();
      controllerSystem.loop();
      return targetSystem.loop();
    });
  }
  em.registerEvent(PLAYER, onPlayerCreate);
  function onPlayerCreate(event){
    console.log('onPlayerCreate');
    return console.log(event.entity);
  }
  function onInput(event){
    console.log('onInput');
    console.log(event.key_left);
    return console.log(event.entity_id);
  }
  em.registerEvent(INPUT, onInput);
  function onOpen(id){
    return console.log('onOpen');
  }
}).call(this);
